searchState.loadedDescShard("ssh_auth_podman_push_lib", 0, "ssh_auth_podman_push\nANSI color\nANSI color\nANSI color\nANSI color\nANSI color\nApplication state (static) is initialized only once in the …\nThe mod.rs generic name is difficult to find and maintain.\nError library for this crate using thiserror\nPublish to docker.io\ndecrypt docker.io api token from file or ask the user to …\nGeneric functions to encrypt and decrypt secrets using the …\nApplication state is initialized in the main() function.\nApplication state (static) is initialized only once in the …\nReturns the argument unchanged.\nget docker.io secret token\nCalls <code>U::from(self)</code>.\nPublish to docker.io\nStruct that represents the json data saved in the ‘*.enc…\nDecode base64 from string to 32bytes.\nDecode base64 from string to string.\nDecrypts plain_encrypted_string with …\nDecode base64 from string to 32bytes.\nEncode base64 from bytes to string.\nEncode base64 from string to string.\nEncrypts symmetrically secret_string_to_encrypt with …\nDoes exist file on path\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet reference to file name.\nGet reference to full file path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrivate key file path: tilde string and PathBuf.\nGet the string from the file that is base64 encoded.\nGenerate a random seed.\nShorten the <code>Vec&lt;u8&gt; to [u8;32]</code>.\nSign the seed with the private key into 32 bytes secret.\nSign seed with ssh-agent into 32 bytes secret.\nReturns the secret signed seed.\nReplace tilde with home::home_dir, only for utf8.\nContains the error value\nEnum of possible errors from this library\nContains the success value\nResult type alias with fixed LibError using thiserror\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")